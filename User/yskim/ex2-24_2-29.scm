(list 1 (list 2 (list 3 4)))
(cons 1 (cons (cons 2 (cons (cons 3 (cons 4 nil)) nil)) nil))
(display "2.25")
(newline)
(define x (list 1 3 (list 5 7) 9))
(car (cdr (car (cdr (cdr x)))))
(define y (list (list 7)))
(car (car y))
(define z (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))
(car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr z))))))))))))
(display "2.26")
(newline)
(define x (list 1 2 3))
(define y (list 4 5 6))
(append x y)
(cons x y)
(list x y)
(display "2.27")
(newline)
(define (reverse items)
  (define (reverse-iter result item)
    (if (null? item)
        result
        (reverse-iter (cons (car item) result) (cdr item))))
  (reverse-iter (list (car items)) (cdr items)))
(define (deep-reverse items)
  (cond ((pair? items)
         (if (null? (cdr items))
             (deep-reverse (car items))
             (list (deep-reverse (cdr items))
                   (deep-reverse (car items)))))
        (else items)))
(define x (list (list 1 2) (list 3 4)))
x
(reverse x)
(deep-reverse x)
(display "2.28")
(newline)
(define (fringe items)
  (cond ((null? items) nil)
        ((not (pair? items)) (list items))
        (else (append (fringe (car items)) (fringe (cdr items))))))
(fringe x)
(display "2.29")
(newline)
;a
(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (car (cdr mobile)))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (car (cdr branch)))
;b
(define (total-weight mobile)
  (+ (branch-weight (left-branch mobile))
     (branch-weight (right-branch mobile))))
(define (branch-weight branch)
  (cond ((not (pair? (branch-structure branch))) (branch-structure branch))
        (else (total-weight (branch-structure branch)))))
(define b (make-mobile (make-branch 1 (make-mobile (make-branch 1 3) (make-branch 1 2))) (make-branch 1 4)))
(total-weight b)
;c
(define (have-mobile? branch)
  (pair? (branch-structure branch)))
(define (balanced? mobile)
  (cond ((and (have-mobile? (left-branch mobile)) 
              (not (balanced? (branch-structure (left-branch mobile)))))
         #f)
        ((and (have-mobile? (right-branch mobile))
              (not (balanced? (branch-structure (right-branch mobile)))))
         #f)
        (else (= (torque (right-branch mobile)) (torque (left-branch mobile))))))
(define (torque branch)
  (if (pair? (branch-structure branch))
      (* (branch-length branch) (total-weight (branch-structure branch)))
      (* (branch-weight branch) (branch-length branch))))
(balanced2? b)
